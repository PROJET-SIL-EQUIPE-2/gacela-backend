generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  admin_id     Int      @id @default(autoincrement())
  name          String?  @db.VarChar
  family_name       String?  @db.VarChar
  email        String?  @unique @db.VarChar
  isSuperAdmin Boolean?
  password     String?           @db.VarChar
  Token           Token[]
  blocked Boolean @default(false)
}

model AgentsMaintenance {
  agent_id        Int               @id @default(autoincrement())
  email           String?           @unique(map: "agent_unique_email") @db.VarChar
  phone_number    String?           @db.VarChar
  password        String?           @db.VarChar
  family_name     String?           @db.VarChar
  name            String?           @db.VarChar
  NotificationsAM NotificationsAM[]
  Task            Task[]
  Vehicules       Vehicules[]
  Token           Token[]
  blocked Boolean @default(false)
}

model Decideurs {
  decideur_id  Int     @id @default(autoincrement())
  name          String? @db.VarChar
  family_name       String? @db.VarChar
  phone_number String? @db.VarChar
  email        String? @unique @db.VarChar
  password     String? @db.VarChar
  Token Token[]
  blocked Boolean @default(false)

}

model DemandesInscription {
  demande_id                  Int                          @id @default(autoincrement())
  locataire_id                Int?                         @unique(map: "demande_unique_locataire")
  date_demande                DateTime?                    @db.Timestamp(6)
  etat_demande                Int?
  etatDemandeInscription      EtatDemandeInscription?      @relation(fields: [etat_demande], references: [etat_id], onDelete: NoAction, onUpdate: NoAction)
  locataire                  Locataires?                  @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rejected DemandesInscriptionRejected?
}

model DemandesInscriptionRejected {
  demande_id          Int                 @id @default(autoincrement())
  justificatif        String?             @db.VarChar
  DemandesInscription DemandesInscription @relation(fields: [demande_id], references: [demande_id], onDelete: NoAction, onUpdate: NoAction)
}

model DemandesReservation {
  demande_id       Int                   @id @default(autoincrement())
  locataire_id     Int?
  etat_reservation String?               @db.VarChar
  date_reservation DateTime?             @db.Date
  start_point      Unsupported("point")?
  end_point        Unsupported("point")?
  Locataires       Locataires?           @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Trajets          Trajets[]
}

model DemandesSupport {
  demande_id   Int         @id @default(autoincrement())
  locataire_id Int?
  message      String?     @db.VarChar
  date_demande DateTime?   @db.Timestamp(6)
  Locataires   Locataires? @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EtatDemandeInscription {
  etat_id             Int                   @id @default(autoincrement())
  description         String?               @db.VarChar
  DemandesInscription DemandesInscription[]
}


model Facture {
  facture_id Int       @id @default(autoincrement())
  trajet_id  Int?
  price      Int?
  paid       Boolean?
  Trajets    Trajets?  @relation(fields: [trajet_id], references: [trajet_id], onDelete: NoAction, onUpdate: NoAction)
  Paiment    Paiment[]
}

model Locataires {
  id                     Int                      @id @default(autoincrement())
  email                  String?                  @unique(map: "locataire_email_unique") @db.VarChar
  phone_number           String?                  @db.VarChar
  password               String?                  @db.VarChar
  photo_identity         String?                  @db.VarChar
  personal_photo         String?                  @db.VarChar
  family_name            String?                  @db.VarChar
  name                   String?                  @db.VarChar
  validated              Boolean?                 @default(false)
  DemandesInscription    DemandesInscription?
  DemandesReservation    DemandesReservation[]
  DemandesSupport        DemandesSupport[]
  NotificationsLocataire NotificationsLocataire[]
  Trajets                Trajets[]
  Token                  Token[]
  blocked Boolean @default(false)
}

model NotificationsAM {
  notif_id          Int                @id @default(autoincrement())
  agent_id          Int?
  date_notif        DateTime?          @db.Timestamp(6)
  titre             String?            @db.VarChar
  message           String?            @db.VarChar
  AgentsMaintenance AgentsMaintenance? @relation(fields: [agent_id], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
}

model NotificationsLocataire {
  notif_id     Int         @id @default(autoincrement())
  locataire_id Int?
  date_notif   DateTime?   @db.Date
  titre        String?     @db.VarChar
  message      String?     @db.VarChar
  Locataires   Locataires? @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Paiment {
  paiment_id   Int          @id @default(autoincrement())
  facture_id   Int?
  date_paiment DateTime?    @db.Timestamp(6)
  type_paiment Int?
  Facture      Facture?     @relation(fields: [facture_id], references: [facture_id], onDelete: NoAction, onUpdate: NoAction)
  TypePaiment  TypePaiment? @relation(fields: [type_paiment], references: [type_id], onDelete: NoAction, onUpdate: NoAction)
}

model Panne {
  panne_id    Int                   @id @default(autoincrement())
  vehicule_id Int?
  charge      Float?
  date_panne  DateTime?             @db.Timestamp(6)
  temperature Float?
  blocked     Boolean?
  position    Unsupported("point")?
  treated     Boolean?
  Vehicules   Vehicules?            @relation(fields: [vehicule_id], references: [vehicule_id], onDelete: NoAction, onUpdate: NoAction)
}

model Task {
  task_id           Int                @id @default(autoincrement())
  agent_id          Int?
  date              DateTime?          @map("_date") @db.Date
  panne_id          Int?
  description       String?            @db.VarChar
  completed         Boolean?
  AgentsMaintenance AgentsMaintenance? @relation(fields: [agent_id], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
}

model Trajets {
  trajet_id           Int                  @id @default(autoincrement())
  locataire_id        Int?
  vehicule_id         Int?
  demande_id          Int?
  etat                String?              @db.VarChar
  DemandesReservation DemandesReservation? @relation(fields: [demande_id], references: [demande_id], onDelete: NoAction, onUpdate: NoAction)
  Locataires          Locataires?          @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Vehicules           Vehicules?           @relation(fields: [vehicule_id], references: [vehicule_id], onDelete: NoAction, onUpdate: NoAction)
  Facture             Facture[]
}

model TypePaiment {
  type_id     Int       @id @default(autoincrement())
  description String?   @db.VarChar
  Paiment     Paiment[]
}



model Vehicules {
  vehicule_id       Int                @id @default(autoincrement())
  responsable       Int?
  type_vehicule     String
  kilometrage       Float          @default(0.0)
  etat              VehicleState    @default(WORKING)
  disponible        Boolean         @default(true)
  price_per_hour    Float          @default(0)
  AgentsMaintenance AgentsMaintenance? @relation(fields: [responsable], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
  Panne             Panne[]
  Trajets           Trajets[]
}

enum VehicleState {
  WORKING
  OUTOFORDER
}

model Token {
  id Int @id @default(autoincrement())
  id_locataire Int?
  id_AM Int?
  id_admin Int?
  id_decideur Int?
  email String? @db.VarChar
  token String
  createdAt DateTime @default(now())
  AgentsMaintenance AgentsMaintenance? @relation(fields: [id_AM], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
  Locataires        Locataires?  @relation(fields: [id_locataire], references: [id], onDelete: Cascade, onUpdate: NoAction)
    Admins        Admins?  @relation(fields: [id_admin], references: [admin_id], onDelete: NoAction, onUpdate: NoAction)
    Decideurs        Decideurs?  @relation(fields: [id_decideur], references: [decideur_id], onDelete: NoAction, onUpdate: NoAction)

}


